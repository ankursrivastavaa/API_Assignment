// <auto-generated />
using System;
using API_Assignment.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API_Assignment.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API_Assignment.Models.Company", b =>
                {
                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("iexId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("isEnabled")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("symbol");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("API_Assignment.Models.Dividends", b =>
                {
                    b.Property<DateTime>("Exe_date");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Dividends_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pay_date")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 48)))
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rec_date")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 48)))
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Exe_date");

                    b.ToTable("Divident");
                });

            modelBuilder.Entity("API_Assignment.Models.Market", b =>
                {
                    b.Property<string>("mic")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("market_percent")
                        .HasColumnType("float");

                    b.Property<double>("tapeA")
                        .HasColumnType("float");

                    b.Property<double>("tapeB")
                        .HasColumnType("float");

                    b.Property<double>("tapeC")
                        .HasColumnType("float");

                    b.Property<string>("venue_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("volume")
                        .HasColumnType("float");

                    b.HasKey("mic");

                    b.ToTable("Market");
                });

            modelBuilder.Entity("API_Assignment.Models.Previous", b =>
                {
                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("close")
                        .HasColumnType("float");

                    b.Property<string>("datetime")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 48)))
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("high")
                        .HasColumnType("float");

                    b.Property<double>("low")
                        .HasColumnType("float");

                    b.Property<string>("open")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 64)))
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("symbol");

                    b.ToTable("Previous");
                });
#pragma warning restore 612, 618
        }
    }
}
